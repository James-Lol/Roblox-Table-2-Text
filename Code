local function GetMaxIndex(Tbl)
    local MaxIndex = 0
    for Index in pairs(Tbl) do
        if type(Index) == "number" and Index > MaxIndex then
            MaxIndex = Index
        end
    end
    return MaxIndex
end

-- Format basic types
local function FormatBasicType(Value)
    if type(Value) == "string" then
        return string.format("%q", Value)
    elseif type(Value) == "boolean" or type(Value) == "number" then
        return tostring(Value)
    elseif Value == nil then
        return "nil"
    end
    return nil
end

-- Format Vector types
local function FormatVector(Vector)
    local VectorType = typeof(Vector)
    if VectorType == "Vector2" or VectorType == "Vector3" then
        return string.format("%s.new(%s)", 
            VectorType,
            table.concat({Vector:components()}, ", "))
    end
    return nil
end

-- Format Color types
local function FormatColor(Color)
    local ColorType = typeof(Color)
    if ColorType == "Color3" then
        return string.format("Color3.new(%g, %g, %g)", 
            Color.R, Color.G, Color.B)
    elseif ColorType == "BrickColor" then
        return string.format('BrickColor.new("%s")', Color.Name)
    end
    return nil
end

-- Format Dimension types
local function FormatDimension(Value)
    local ValueType = typeof(Value)
    if ValueType == "UDim" then
        return string.format("UDim.new(%g, %g)", 
            Value.Scale, Value.Offset)
    elseif ValueType == "UDim2" then
        return string.format("UDim2.new(%g, %g, %g, %g)",
            Value.X.Scale, Value.X.Offset,
            Value.Y.Scale, Value.Y.Offset)
    end
    return nil
end

-- Format Position/Transform types
local function FormatTransform(Value)
    local ValueType = typeof(Value)
    if ValueType == "CFrame" then
        return string.format("CFrame.new(%s)", 
            table.concat({Value:components()}, ", "))
    elseif ValueType == "Ray" then
        local Origin, Direction = Value.Origin, Value.Direction
        return string.format("Ray.new(Vector3.new(%g, %g, %g), Vector3.new(%g, %g, %g))",
            Origin.X, Origin.Y, Origin.Z,
            Direction.X, Direction.Y, Direction.Z)
    end
    return nil
end

-- Format Region types
local function FormatRegion(Value)
    local ValueType = typeof(Value)
    if ValueType == "Rect" then
        return string.format("Rect.new(%g, %g, %g, %g)",
            Value.Min.X, Value.Min.Y,
            Value.Max.X, Value.Max.Y)
    elseif ValueType == "Region3" then
        local Min, Max = Value.CFrame.Position - Value.Size/2, Value.CFrame.Position + Value.Size/2
        return string.format("Region3.new(Vector3.new(%g, %g, %g), Vector3.new(%g, %g, %g))",
            Min.X, Min.Y, Min.Z,
            Max.X, Max.Y, Max.Z)
    end
    return nil
end

-- Format Sequence types
local function FormatSequence(Value)
    local ValueType = typeof(Value)
    if ValueType == "ColorSequence" then
        local FormattedPoints = {}
        for _, Point in ipairs(Value.Keypoints) do
            table.insert(FormattedPoints, 
                string.format("ColorSequenceKeypoint.new(%g, Color3.new(%g, %g, %g))",
                    Point.Time,
                    Point.Value.R, Point.Value.G, Point.Value.B))
        end
        return string.format("ColorSequence.new({%s})",
            table.concat(FormattedPoints, ", "))
    elseif ValueType == "NumberSequence" then
        local FormattedPoints = {}
        for _, Point in ipairs(Value.Keypoints) do
            table.insert(FormattedPoints,
                string.format("NumberSequenceKeypoint.new(%g, %g, %g)",
                    Point.Time,
                    Point.Value,
                    Point.Envelope or 0))
        end
        return string.format("NumberSequence.new({%s})",
            table.concat(FormattedPoints, ", "))
    end
    return nil
end

-- Format Range types
local function FormatRange(Value)
    local ValueType = typeof(Value)
    if ValueType == "NumberRange" then
        return string.format("NumberRange.new(%g, %g)",
            Value.Min, Value.Max)
    end
    return nil
end

-- Format Reference types
local function FormatReference(Value)
    local ValueType = typeof(Value)
    if ValueType == "Instance" then
        return Value:GetFullName()
    elseif ValueType == "EnumItem" then
        return string.format("Enum.%s.%s", 
            tostring(Value.EnumType),
            tostring(Value.Name))
    elseif ValueType == "Enum" then
        return "Enum." .. tostring(Value)
    end
    return nil
end

local function FormatValue(Value, Indent)
    -- Try all formatters in sequence
    local Formatted = 
        FormatBasicType(Value) or
        FormatVector(Value) or
        FormatColor(Value) or
        FormatDimension(Value) or
        FormatTransform(Value) or
        FormatRegion(Value) or
        FormatSequence(Value) or
        FormatRange(Value) or
        FormatReference(Value)
    
    if Formatted then
        return Formatted
    elseif type(Value) == "table" then
        return TableToString(Value, Indent)
    else
        return tostring(Value)
    end
end

function TableToString(Tbl, Indent)
    if type(Tbl) ~= "table" then
        return FormatValue(Tbl, Indent)
    end
    
    Indent = Indent or ""
    local Result = "{\n"
    local MaxIndex = GetMaxIndex(Tbl)
    
    -- Handle sequential indices
    for I = 1, MaxIndex do
        Result = Result .. Indent .. "    [" .. I .. "] = "
        Result = Result .. FormatValue(Tbl[I], Indent .. "    ") .. ",\n"
    end
    
    -- Handle non-sequential indices
    for Index, Value in pairs(Tbl) do
        if type(Index) ~= "number" or Index > MaxIndex then
            Result = Result .. Indent .. "    "
            
            -- Format the index
            if type(Index) == "number" then
                Result = Result .. "[" .. Index .. "]"
            else
                Result = Result .. "[" .. FormatValue(Index, "") .. "]"
            end
            
            Result = Result .. " = " .. FormatValue(Value, Indent .. "    ") .. ",\n"
        end
    end
    
    return Result .. Indent .. "}"
end
